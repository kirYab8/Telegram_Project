import telebot
from telebot import types
from translate import Translator
from random import choice
import time


bot = telebot.TeleBot('6216688445:AAFcm8EOmPO-N9bzAQGVYKsONoW6SitBzB8')

markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
start_button = types.KeyboardButton('/start')
translate_button = types.KeyboardButton('/translate')
music_video_button = types.KeyboardButton('/music_video')
video_button = types.KeyboardButton('/video')
games_button = types.KeyboardButton('/games')
markup.add(start_button, translate_button, music_video_button, video_button, games_button)


# –ù—É, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    global markup
    mess = f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.username}</b>'
    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)


# –°–∫–∏–¥—ã–≤–∞–µ—Ç—Å—è –∑–∞ –¥–µ–Ω—å–≥–∏ –¥–∞
@bot.message_handler(commands=['music_video'])
def music_video(message):
    bot.send_message(message.chat.id, 'https://www.youtube.com/watch?v=rn-fGxWlnhM')


# –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
@bot.message_handler(commands=['translate'])
def translate(message):
    back_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    back_button = types.KeyboardButton('/back')
    back_markup.add(back_button)
    sent = bot.send_message(message.chat.id, '–ß—Ç–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?', reply_markup=back_markup)

    bot.register_next_step_handler(sent, translate_the_words)


def translate_the_words(message):
    global markup
    translator = Translator(to_lang="Russian")
    sent = translator.translate(message.text)
    if message.text != '/back' and message.text != '/start':
        bot.send_message(message.chat.id, sent)
    else:
        bot.send_message(message.chat.id, '–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç.', reply_markup=markup)


# –î–∞–ª—å—à–µ –∏–¥—É—Ç –∏–≥—Ä—ã –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∏—Ö
@bot.message_handler(commands=['games'])
def games(message):
    sent = bot.send_message(message.chat.id, '–î–∞–≤–∞–π—Ç–µ –ø–æ–∏–≥—Ä–∞–µ–º')
    bot.register_next_step_handler(sent, choose_a_mode)


def choose_a_mode(message):
    games_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    dice_button = types.KeyboardButton('Dice üé≤')
    darts_button = types.KeyboardButton('Darts üéØ')
    casino_button = types.KeyboardButton('Casino üé∞')
    back_button = types.KeyboardButton('/back')
    games_markup.add(dice_button, darts_button, casino_button, back_button)
    sent = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º', reply_markup=games_markup)
    if message.text != '/back' or message.text != '/start':
        if message.text == 'Dice üé≤':
            bot.register_next_step_handler(sent, dice)
        elif message.text == 'Darts üéØ':
            bot.register_next_step_handler(sent, darts)
        elif message.text == 'Casino üé∞':
            bot.register_next_step_handler(sent, casino)
    else:
        bot.send_message(message.chat.id, '–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç.', reply_markup=markup)


def dice(message):
    global markup
    sent = bot.send_dice(message.chat.id)
    if sent.dice.value <= 3:
        time.sleep(3.8)
        bot.send_message(message.chat.id, f'–í—ã–ø–∞–ª–æ {sent.dice.value}...', reply_markup=markup)
    elif 6 > sent.dice.value > 3:
        time.sleep(3.8)
        bot.send_message(message.chat.id, f'–ö—É–±–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞ {sent.dice.value}. –ù–µ–ø–ª–æ—Ö–æ.', reply_markup=markup)
    elif sent.dice.value == 6:
        time.sleep(3.8)
        bot.send_message(message.chat.id, '–≠—Ç–æ –ø–æ–±–µ–¥–∞!', reply_markup=markup)


def casino(message):
    global markup
    sent = bot.send_dice(message.chat.id, 'üé∞')
    if sent.dice.value == 1:
        time.sleep(2.6)
        bot.reply_to(message, 'bar', reply_markup=markup)
    elif sent.dice.value == 22:
        time.sleep(2.6)
        bot.reply_to(message, 'grape', reply_markup=markup)
    elif sent.dice.value == 43:
        time.sleep(2.6)
        bot.reply_to(message, 'lemons', reply_markup=markup)
    elif sent.dice.value == 64:
        time.sleep(2.6)
        bot.reply_to(message, 'AZINO!', reply_markup=markup)


def darts(message):
    global markup
    sent = bot.send_dice(message.chat.id, 'üéØ')
    if sent.dice.value <= 3:
        time.sleep(2.8)
        bot.send_message(message.chat.id, f'–£ –≤–∞—Å {sent.dice.value}...', reply_markup=markup)
    elif 6 > sent.dice.value > 3:
        time.sleep(2.8)
        bot.send_message(message.chat.id, f'–í—ã –ø–æ–ø–∞–ª–∏ –≤ {sent.dice.value}. –ù–µ–ø–ª–æ—Ö–æ.', reply_markup=markup)
    elif sent.dice.value == 6:
        time.sleep(2.8)
        bot.send_message(message.chat.id, '–≠—Ç–æ –ø–æ–±–µ–¥–∞!', reply_markup=markup)


# –°–∫–∏–¥—ã–≤–∞–µ—Ç—Å—è –æ–±—É—á–∞–ª–∫–∞
@bot.message_handler(commands=['video'])
def video(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–í–∏–¥–æ—Å', url='https://www.youtube.com/watch?v=HodO2eBEz_8'))
    bot.send_message(message.chat.id, 'TeleBot for Python', reply_markup=markup)


# –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ñ–æ—Ç–∫—É
@bot.message_handler(content_types=['photo'])
def get_photo(message):
    bot.send_message(message.chat.id, '–¢–æ–ø —Ñ–æ—Ç–∫–∞')


# –õ—é–±–æ–π –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ç–µ–∫—Å—Ç
@bot.message_handler(content_types=['text'])
def other_text(message):
    photo1, photo2, photo3 = open('data/leto1.jpg', 'rb'), open('data/leto2.jpg', 'rb'), open('data/leto3.jpg', 'rb')
    lst_photos = [photo1, photo2, photo3]
    lst_words = ['–Ø —Ö–∑ —á–µ —Ç–µ–±–µ –Ω–∞–¥–æ', '–ù–µ –ø–æ–Ω–∏–º–∞—é', '–Ø –≤–∞—Å —Å–ª—É—à–∞—é', '–ñ–æ–ø–∞', '–¢—ã —á–µ –æ—Ç –º–µ–Ω—è —Ö–æ—á–µ—à—å? –ü–∏—à–∏ /start']
    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        bot.send_message(message.chat.id, '–ù—É –∑–¥–æ—Ä–æ–≤–∞', parse_mode='html')
    elif message.text.lower() == 'id':
        bot.send_message(message.chat.id, f'–¢–≤–æ–π ID: {message.from_user.id}', parse_mode='html')
    else:
        bot.send_message(message.chat.id, choice(lst_words), parse_mode='html')
        # bot.send_photo(message.chat.id, choice(lst_photos))


bot.polling(none_stop=True)
